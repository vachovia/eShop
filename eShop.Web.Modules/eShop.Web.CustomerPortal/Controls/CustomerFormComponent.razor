@if (customer != null)
{
    <EditForm Model="customer" class="form-line" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group pb-2">
            <label class="p-1" for="name">Name</label>
            <InputText id="name" @bind-Value="customer.CustomerName" class="form-control"></InputText>
        </div>

        <div class="form-group pb-2">
            <label class="p-1" for="address">Address</label>
            <InputText id="address" @bind-Value="customer.CustomerAddress" class="form-control"></InputText>
        </div>

        <div class="form-group pb-2">
            <label class="p-1" for="city">City</label>
            <InputText id="city" @bind-Value="customer.CustomerCity" class="form-control"></InputText>
        </div>

        <div class="form-group pb-2">
            <label class="p-1" for="province">Province</label>
            <InputText id="province" @bind-Value="customer.CustomerStateProvince" class="form-control"></InputText>
        </div>

        <div class="form-group pb-2">
            <label class="p-1" for="country">Country</label>
            <InputText id="country" @bind-Value="customer.CustomerCountry" class="form-control"></InputText>
        </div>

        <div class="form-group mt-4 text-end">
            <button type="submit" class="btn btn-primary">Place Order</button>
        </div>

    </EditForm>
}


@code {

    private CustomerViewModel customer = new();

    [Parameter]
    public EventCallback<CustomerViewModel> OnCustomerInfoSubmitted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        customer = new CustomerViewModel();
    }

    private void HandleValidSubmit()
    {
        OnCustomerInfoSubmitted.InvokeAsync(customer);
    }

}
